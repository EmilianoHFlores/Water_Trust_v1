# Leyendo los datos:
M1 = read.csv("TLA2021.csv")
# Leyendo los datos:
M1 = read.csv("TLA2021.csv")
# Leyendo los datos:
M1 = read.csv("TLA2021.csv")
# Seleccionar sólo las columnas de interés:
M2 = M1[,c("FECHA","HORA", "CO", "CO2", "NO", "NO2","NOX", "O3")]
# Eliminar las filas con NA o vacías:
M3 = na.omit(M2)
# Guardando en un nuevo archivo la base de datos seleccionada:
write.csv(M3, "BD_selecta_SAC2021_sin_NA.csv")
# Extrayendo una muestra aleatoria de 1000, sin reemplazo:
indice = sample(1:length(M3$FECHA), 1000, replace = FALSE)
M4 = M3[indice,]
# Guardando la nueva BD dela muesetra:
write.csv(M4, "TLAmuestra.csv")
# Quitar la variable categórica FECHA y HORA para quedar una matriz de datos numéricas:
M5 = M4[,-1:-2]     # todas las filas menos las dos primeras columnas
cor(M5)
plot(M5, col = "red")
View(M5)
View(M4)
# Leyendo los datos:
M1 = read.csv("TLA2021.csv")
# Seleccionar sólo las columnas de interés:
M2 = M1[,c("FECHA","HORA", "CO", "CO2", "NO", "NO2","NOX", "O3")]
# Eliminar las filas con NA o vacías:
M3 = na.omit(M2)
# Guardando en un nuevo archivo la base de datos seleccionada:
write.csv(M3, "TLA2021_sin_NA.csv")
# Extrayendo una muestra aleatoria de 1000, sin reemplazo:
indice = sample(1:length(M3$FECHA), 1000, replace = FALSE)
M4 = M3[indice,]
# Guardando la nueva BD dela muesetra:
write.csv(M4, "TLAmuestra.csv")
# Quitar la variable categórica FECHA y HORA para quedar una matriz de datos numéricas:
M5 = M4[,-1:-2]     # todas las filas menos las dos primeras columnas
cor(M5)
plot(M5, col = "red")
# Leyendo los datos:
M1 = read.csv("TLA2021.csv")
# Seleccionar sólo las columnas de interés:
M2 = M1[,c("FECHA","HORA", "CO", "CO2", "NO", "NO2","NOX", "O3")]
# Eliminar las filas con NA o vacías:
M3 = na.omit(M2)
# Guardando en un nuevo archivo la base de datos seleccionada:
write.csv(M3, "TLA2021_sin_NA.csv")
# Extrayendo una muestra aleatoria de 1000, sin reemplazo:
indice = sample(1:length(M3$FECHA), 1000, replace = FALSE)
M4 = M3[indice,]
# Guardando la nueva BD dela muesetra:
write.csv(M4, "TLAmuestra_1000.csv")
# Quitar la variable categórica FECHA y HORA para quedar una matriz de datos numéricas:
M5 = M4[,-1:-2]     # todas las filas menos las dos primeras columnas
cor(M5)
plot(M5, col = "red")
library(googleCloudStorageR)
gcs_setup()
gcs_setup()
gcs_setup()
gcs_setup()
library(readr)
library(googleCloudStorageR)
gcs_setup()
library(readr)
library(googleCloudStorageR)
gcs_setup()
library(googleCloudStorageR)
gcs_setup()
install.package("usethis")
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
gcs_setup()
library(readr)
library(googleCloudStorageR)
library(usethis)
gcs_setup()
install.packages("googledrive")
library(readr)
library(googledrive)
drive_find(n_max=30)
drive_find(n_max=30)
drive_find(n_max=30)
library(readr)
library(googledrive)
drive_find(n_max = 30)
drivefind <- drive_find(n_max = 30)
View(drivefind)
setwd("~/GitHub/Water_Trust_v1/CSV Tests")
View(drivefind)
drive_upload("saving_plot1.png",
path = "Water_Trust_Data",
name = "saving_plot.png",
overwrite = TRUE)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(tidyverse)
library(ggplot2)
library(readr)
library(googledrive)
nodeData <- read.csv("https://raw.githubusercontent.com/EmilianoHFlores/Water_Trust_v1/main/CSV%20Tests/Expected_vs_Detected.csv?token=GHSAT0AAAAAABZFJPKSGFOJKFPOP5GHG4X2YZPMWEA")
x <- seq(1:200)
y1=nodeData$EXPECTED[]
y2=nodeData$DETECTED
nodeData <- read.csv("https://raw.githubusercontent.com/EmilianoHFlores/Water_Trust_v1/main/CSV%20Tests/Expected_vs_Detected_v1.csv")
x <- seq(1:200)
y1=nodeData$EXPECTED[]
y2=nodeData$DETECTED
y1=nodeData[,4]
y2=nodeData[,5]
x <- seq(1:length(nodeData[,4]))
x <- seq(1:(length(nodeData[,4])-4))
y1=nodeData[,4]
y2=nodeData[,5]
y1=nodeData[,4]
y2=nodeData[,5]
y1=nodeData[,4]
y1=y1[4:]
y1=nodeData[,4]
y1=y1[4,]
y1=nodeData[,4]
y1=y1[4:-1]
y1=nodeData[,4]
y1=y1[-4:]
y1=nodeData[,4]
y1=tail(y1,4)
dataLength = length(nodeData[,4])-4
x <- seq(1:dataLength)
node_characteristics = 4
dataLength = length(nodeData[,4])-node_characteristics
x <- seq(1:dataLength)
y1=nodeData[,4]
y1=tail(y1,dataLength-node_characteristics)
y1=nodeData[,4]
y1=tail(y1,dataLength-node_characteristics)
y1=nodeData[,4]
y1=tail(y1,dataLength)
y1=nodeData[,4]
y1=tail(y1,dataLength)
y2=nodeData[,5]
y2=tail(y2,dataLength)
nodeData[1,2]
filename = paste(nodeData[1,2], "_", nodeData[colExpected,2], "_", nodeData[colExpected,3], ".png")
colExpected=4
colDetected=5
y1=nodeData[,colExpected]
y1=tail(y1,dataLength)
y2=nodeData[,colDetected]
y2=tail(y2,dataLength)
filename = paste(nodeData[1,2], "_", nodeData[colExpected,2], "_", nodeData[colExpected,3], ".png")
filename
filename = paste(nodeData[1,2], "_", nodeData[2,colExpected], "_", nodeData[3,colExpected], ".png")
png(file="saving_plot1.png", width=600, height=350)
filename = paste(nodeData[1,2], "_", nodeData[2,colExpected], "_", nodeData[3,colExpected], ".png")
filename
filename = paste(nodeData[1,2], "_", nodeData[2,colExpected], "_", nodeData[3,colExpected], ".png", sep="")
png(file="saving_plot1.png", width=600, height=350)
filename
filename = paste(nodeData[1,2], "_", nodeData[2,colExpected], "_", nodeData[3,colExpected], ".png", sep="")
png(file=filename, width=600, height=350)
plot(x, y1, type = "l", ylim=c(0,100))
lines(x, y2, type = "l")
for (i in 1:(length(time)-1)){
xmin=i;
xmax=1+i;
if ((y1[i])>(y2[i]+10)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
}
lines(x, y1)
lines(x, y2)
filename = paste(nodeData[1,2], "_", nodeData[2,colExpected], "_", nodeData[3,colExpected], ".png", sep="")
png(file=filename, width=600, height=350)
plot(x, y1, type = "l", ylim=c(0,100))
lines(x, y2, type = "l")
for (i in 1:(dataLength-1)){
xmin=i;
xmax=1+i;
if ((y1[i])>(y2[i]+10)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
}
lines(x, y1)
lines(x, y2)
dev.off()
drivefind <- drive_find(n_max = 30)
drive_upload("saving_plot1.png",
path = "Water_Trust_Data",
name = "saving_plot.png",
overwrite = TRUE)
dataLength = length(nodeData[,4])-node_characteristics
x <- seq(1:dataLength)
colExpected=4
colDetected=5
y1=nodeData[,colExpected]
y1=tail(y1,dataLength)
y2=nodeData[,colDetected]
y2=tail(y2,dataLength)
plot(x, y1, type = "l", ylim=c(0,100))
lines(x, y2, type = "l")
plot(x,y1)
