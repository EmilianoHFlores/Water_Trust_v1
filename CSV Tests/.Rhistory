y2=nodeData$DETECTED
plot(time, y1, type = "l")
lines(x, y2, type = "l")
plot(time, y1, type = "l", ylim=c(0,100))
lines(x, y2, type = "l")
plot(time, y1, type = "l", ylim=c(0,100))
lines(time, y2, type = "l")
l <- length(x)
color <- hcl.colors(l, "TealGrn") # Palette
l <- length(time)
color <- hcl.colors(l, "TealGrn") # Palette
for (i in 1:l) {
polygon(c(x[i], rev(x[i])),
c(y2[i], rev(y1[i])),
border = color[i], col = NA)
}
for (i in 1:l) {
polygon(c(time[i], rev(x[i])),
c(y2[i], rev(y1[i])),
border = color[i], col = NA)
}
for (i in 1:l) {
polygon(c(time[i], rev(time[i])),
c(y2[i], rev(y1[i])),
border = color[i], col = NA)
}
lines(time, y1)
lines(time, y2)
library(tidyverse)
library(ggplot2)
library(readr)
nodeData <- read.csv("https://raw.githubusercontent.com/EmilianoHFlores/Water_Trust_v1/main/CSV%20Tests/Expected_vs_Detected.csv?token=GHSAT0AAAAAABZFJPKSGFOJKFPOP5GHG4X2YZPMWEA")
time <- seq(1:200)
y1=nodeData$EXPECTED
y2=nodeData$DETECTED
plot(time, y1, type = "l", ylim=c(0,100))
lines(time, y2, type = "l")
l <- length(time)
color <- hcl.colors(l, "TealGrn") # Palette
for (i in 1:l) {
polygon(c(time[i], rev(time[i])),
c(y2[i], rev(y1[i])),
border = color[i], col = NA)
}
lines(time, y1)
lines(time, y2)
library(tidyverse)
library(ggplot2)
library(readr)
nodeData <- read.csv("https://raw.githubusercontent.com/EmilianoHFlores/Water_Trust_v1/main/CSV%20Tests/Expected_vs_Detected.csv?token=GHSAT0AAAAAABZFJPKSGFOJKFPOP5GHG4X2YZPMWEA")
x <- seq(1:200)
y1=nodeData$EXPECTED
y2=nodeData$DETECTED
plot(x, y1, type = "l", ylim=c(0,100))
lines(x, y2, type = "l")
# l <- length(time)
# color <- hcl.colors(l, "TealGrn") # Palette
#
# for (i in 1:l) {
#   polygon(c(time[i], rev(time[i])),
#           c(y2[i], rev(y1[i])),
#           border = color[i], col = NA)
# }
# Min and max X values
xmin <- 2
xmax <- 45
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
lines(x, y1)
lines(x, y2)
library(tidyverse)
library(ggplot2)
library(readr)
nodeData <- read.csv("https://raw.githubusercontent.com/EmilianoHFlores/Water_Trust_v1/main/CSV%20Tests/Expected_vs_Detected.csv?token=GHSAT0AAAAAABZFJPKSGFOJKFPOP5GHG4X2YZPMWEA")
x <- seq(1:200)
y1=nodeData$EXPECTED
y2=nodeData$DETECTED
plot(x, y1, type = "l", ylim=c(0,100))
lines(x, y2, type = "l")
# l <- length(time)
# color <- hcl.colors(l, "TealGrn") # Palette
#
# for (i in 1:l) {
#   polygon(c(time[i], rev(time[i])),
#           c(y2[i], rev(y1[i])),
#           border = color[i], col = NA)
# }
# Min and max X values
for (i in 1:length(time)-1){
xmin=i;
xmax=i+1;
if (y1[i]<(y2[i]-5)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
}
lines(x, y1)
lines(x, y2)
y1[2]
y2[2]
for (i in 1:length(time)-2){
xmin=i;
xmax=i+1;
if (y1[i]<(y2[i]-5)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
}
y[2]
y[2]-5
if ((y1[i])<(y2[i]-5)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
for (i in 1:length(time)-2){
xmin=i;
xmax=i+1;
if ((y1[i])<(y2[i]-5)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
}
for (i in 1:length(time)-2){
xmin=i;
xmax=i+1;
i
}
for (i in 1:length(time)-2){
xmin=i;
xmax=i+1;
print(i)
}
for (i in 1:length(time)-2){
xmin=i;
xmax=1+i;
print(i)
}
# Min and max X values
xmin=i;
# Min and max X values
for (i in 1:(length(time)-2)){
xmin=i;
xmax=1+i;
print(i)
}
for (i in 1:(length(time)-1)){
xmin=i;
xmax=1+i;
if ((y1[i])<(y2[i]-5)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
}
for (i in 1:(length(time)-1)){
xmin=i;
xmax=1+i;
if ((y1[i])<(y2[i]-8)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
}
y1[i]
y2[i]
for (i in 1:(length(time)-1)){
xmin=i;
xmax=1+i;
if ((y1[i])>(y2[i]-8)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
}
for (i in 1:(length(time)-1)){
xmin=i;
xmax=1+i;
if ((y1[i])>(y2[i]-5)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
}
y1[i]
y2[i]-5
for (i in 1:(length(time)-1)){
xmin=i;
xmax=1+i;
if ((y1[i])>(y2[i]+5)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
}
for (i in 1:(length(time)-1)){
xmin=i;
xmax=1+i;
if ((y1[i])>(y2[i]+3)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
}
for (i in 1:(length(time)-1)){
xmin=i;
xmax=1+i;
if ((y1[i])>(y2[i]+8)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
}
for (i in 1:(length(time)-1)){
xmin=i;
xmax=1+i;
if ((y1[i])>(y2[i]+8)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
}
for (i in 1:(length(time)-1)){
xmin=i;
xmax=1+i;
if ((y1[i])>(y2[i]+4)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
}
for (i in 1:(length(time)-1)){
xmin=i;
xmax=1+i;
if ((y1[i])>(y2[i]+8)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
}
for (i in 1:(length(time)-1)){
xmin=i;
xmax=1+i;
if ((y1[i])>(y2[i]+10)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
}
library(tidyverse)
library(ggplot2)
library(readr)
nodeData <- read.csv("https://raw.githubusercontent.com/EmilianoHFlores/Water_Trust_v1/main/CSV%20Tests/Expected_vs_Detected.csv?token=GHSAT0AAAAAABZFJPKSGFOJKFPOP5GHG4X2YZPMWEA")
x <- seq(1:200)
y1=nodeData$EXPECTED
y2=nodeData$DETECTED
jpeg(file="saving_plot1.jpeg")
plot(x, y1, type = "l", ylim=c(0,100))
lines(x, y2, type = "l")
# l <- length(time)
# color <- hcl.colors(l, "TealGrn") # Palette
#
# for (i in 1:l) {
#   polygon(c(time[i], rev(time[i])),
#           c(y2[i], rev(y1[i])),
#           border = color[i], col = NA)
# }
# Min and max X values
for (i in 1:(length(time)-1)){
xmin=i;
xmax=1+i;
if ((y1[i])>(y2[i]+10)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
}
lines(x, y1)
lines(x, y2)
dev.off()
library(tidyverse)
library(ggplot2)
library(readr)
nodeData <- read.csv("https://raw.githubusercontent.com/EmilianoHFlores/Water_Trust_v1/main/CSV%20Tests/Expected_vs_Detected.csv?token=GHSAT0AAAAAABZFJPKSGFOJKFPOP5GHG4X2YZPMWEA")
x <- seq(1:200)
y1=nodeData$EXPECTED
y2=nodeData$DETECTED
jpeg(file="saving_plot1.jpeg")
plot(x, y1, type = "l", ylim=c(0,100))
lines(x, y2, type = "l")
# l <- length(time)
# color <- hcl.colors(l, "TealGrn") # Palette
#
# for (i in 1:l) {
#   polygon(c(time[i], rev(time[i])),
#           c(y2[i], rev(y1[i])),
#           border = color[i], col = NA)
# }
# Min and max X values
for (i in 1:(length(time)-1)){
xmin=i;
xmax=1+i;
if ((y1[i])>(y2[i]+10)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
}
lines(x, y1)
lines(x, y2)
dev.off()
setwd("~/GitHub/Water_Trust_v1/CSV Tests")
library(tidyverse)
library(ggplot2)
library(readr)
nodeData <- read.csv("https://raw.githubusercontent.com/EmilianoHFlores/Water_Trust_v1/main/CSV%20Tests/Expected_vs_Detected.csv?token=GHSAT0AAAAAABZFJPKSGFOJKFPOP5GHG4X2YZPMWEA")
x <- seq(1:200)
y1=nodeData$EXPECTED
y2=nodeData$DETECTED
jpeg(file="saving_plot1.jpeg")
plot(x, y1, type = "l", ylim=c(0,100))
lines(x, y2, type = "l")
# l <- length(time)
# color <- hcl.colors(l, "TealGrn") # Palette
#
# for (i in 1:l) {
#   polygon(c(time[i], rev(time[i])),
#           c(y2[i], rev(y1[i])),
#           border = color[i], col = NA)
# }
# Min and max X values
for (i in 1:(length(time)-1)){
xmin=i;
xmax=1+i;
if ((y1[i])>(y2[i]+10)){
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#D32500")
}
else{
polygon(c(x[x >= xmin & x <= xmax],
rev(x[x >= xmin & x <= xmax])),
c(y2[x >= xmin & x <= xmax],
rev(y1[x >= xmin & x <= xmax])),
col = "#6BD7AF")
}
}
lines(x, y1)
lines(x, y2)
dev.off()
source("~/GitHub/Water_Trust_v1/CSV Tests/CSV_Expected_vs_Leakage_Plot_Test_1.R", echo=TRUE)
install.packages("googleCloudStorageR")
library(readr)
library(googleCloudStorageR)
gcs_setup()
library(googleCloudStorageR)
gcs_setup()
gcs_setup()
